// Code generated by mockery v2.33.0. DO NOT EDIT.

package mocks

import (
	model "avito-backend/internal/app/model"
	context "context"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// IRepository is an autogenerated mock type for the IRepository type
type IRepository struct {
	mock.Mock
}

// AddSegmentIfNotExists provides a mock function with given fields: ctx, name
func (_m *IRepository) AddSegmentIfNotExists(ctx context.Context, name string) (int, error) {
	ret := _m.Called(ctx, name)

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (int, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) int); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddUserSegmentIfNotExists provides a mock function with given fields: ctx, userId, segmentId, expires
func (_m *IRepository) AddUserSegmentIfNotExists(ctx context.Context, userId int, segmentId int, expires *time.Time) (int, error) {
	ret := _m.Called(ctx, userId, segmentId, expires)

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int, *time.Time) (int, error)); ok {
		return rf(ctx, userId, segmentId, expires)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int, *time.Time) int); ok {
		r0 = rf(ctx, userId, segmentId, expires)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int, *time.Time) error); ok {
		r1 = rf(ctx, userId, segmentId, expires)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteSegment provides a mock function with given fields: ctx, name
func (_m *IRepository) DeleteSegment(ctx context.Context, name string) error {
	ret := _m.Called(ctx, name)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteUserSegmentIfExists provides a mock function with given fields: ctx, userId, segmentName
func (_m *IRepository) DeleteUserSegmentIfExists(ctx context.Context, userId int, segmentName string) (bool, error) {
	ret := _m.Called(ctx, userId, segmentName)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, string) (bool, error)); ok {
		return rf(ctx, userId, segmentName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, string) bool); ok {
		r0 = rf(ctx, userId, segmentName)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, string) error); ok {
		r1 = rf(ctx, userId, segmentName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FlushExpired provides a mock function with given fields: ctx
func (_m *IRepository) FlushExpired(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetSegmentId provides a mock function with given fields: ctx, name
func (_m *IRepository) GetSegmentId(ctx context.Context, name string) (int, error) {
	ret := _m.Called(ctx, name)

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (int, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) int); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSegmentName provides a mock function with given fields: ctx, id
func (_m *IRepository) GetSegmentName(ctx context.Context, id int) (string, error) {
	ret := _m.Called(ctx, id)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (string, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) string); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserSegments provides a mock function with given fields: ctx, id
func (_m *IRepository) GetUserSegments(ctx context.Context, id int) ([]model.SegmentWithExpires, error) {
	ret := _m.Called(ctx, id)

	var r0 []model.SegmentWithExpires
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) ([]model.SegmentWithExpires, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) []model.SegmentWithExpires); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.SegmentWithExpires)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIRepository creates a new instance of IRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *IRepository {
	mock := &IRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
