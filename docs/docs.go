// Code generated by swaggo/swag. DO NOT EDIT.

package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "Ivan Demchuk",
            "email": "is.demchuk@gmail.com"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/addDeleteUserSegment": {
            "put": {
                "description": "add and delete segments from user by id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user segment"
                ],
                "summary": "Add and delete segments from user by id",
                "parameters": [
                    {
                        "description": "query params",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handler.AddDeleteUserSegmentRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handler.AddDeleteUserSegmentResponse"
                        }
                    }
                }
            }
        },
        "/addSegment": {
            "post": {
                "description": "add segment and get back its' id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "segment"
                ],
                "summary": "Add segment",
                "parameters": [
                    {
                        "description": "query params",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handler.AddSegmentRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handler.AddSegmentResponse"
                        }
                    }
                }
            }
        },
        "/deleteSegment/{id}": {
            "delete": {
                "description": "delete segment by id; delete all user_segment entries with the given id",
                "tags": [
                    "segment"
                ],
                "summary": "Delete segment",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Segment id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/flushExpired": {
            "delete": {
                "description": "delete segment by id; delete all user_segment entries with the given id",
                "tags": [
                    "user segment"
                ],
                "summary": "Flush expired user_segment entries",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/getSegmentsOfUser/{id}": {
            "get": {
                "description": "get segments of user by id; returns only not expired entries",
                "tags": [
                    "user"
                ],
                "summary": "Get segments of user",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "handler.AddDeleteUserSegmentRequest": {
            "type": "object",
            "required": [
                "user_id"
            ],
            "properties": {
                "to_add": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/handler.Segment"
                    }
                },
                "to_delete": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "format": "array"
                    },
                    "example": [
                        "SEGMENT1",
                        "SEGMENT2"
                    ]
                },
                "user_id": {
                    "type": "integer",
                    "format": "integer",
                    "example": 1000
                }
            }
        },
        "handler.AddDeleteUserSegmentResponse": {
            "type": "object",
            "properties": {
                "added_ids": {
                    "type": "array",
                    "items": {
                        "type": "integer",
                        "format": "array"
                    },
                    "example": [
                        6,
                        7,
                        8
                    ]
                }
            }
        },
        "handler.AddSegmentRequest": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "type": "string",
                    "format": "string",
                    "example": "AVITO_TEST_SEGMENT"
                }
            }
        },
        "handler.AddSegmentResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "integer",
                    "example": 1
                }
            }
        },
        "handler.Segment": {
            "type": "object",
            "properties": {
                "expires": {
                    "type": "string",
                    "example": "2023-08-25T17:00:05"
                },
                "name": {
                    "type": "string",
                    "example": "SEGMENT10"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "Backend Trainee Assignment 2023",
	Description:      "Swagger documentation fo Backend Trainee Assignment 2023 service",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
